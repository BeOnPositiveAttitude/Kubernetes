# контейнер - это автономное готовое к запуску приложение
# это отличает контейнер от виртуальной машины
# внутри контейнер имеет все ноебходимое для запуска приложения
# для запуска контейнера необходим container runtime
# container runtime запускается на хост-платформе и устанавливает взаимодействие между ядром локального хоста и контейнером
# все контейнеры независимо от того, что они делают, запускаются поверх одного ядра на локальном хосте

# контейнеры основаны на фичах ОС Linux
# Linux Kernel Namespaces обеспечивают строгую изоляцию между системными компонентами на различных уровнях:
# - network
# - file
# - users
# - processes
# - IPCs (Inter-Process Communication)
# Linux CGroups предлагают распределение и ограничение системных ресурсов

# container runtime позволяет запускать контейнеры поверх ОС хоста
# container runtime отвечает за все составляющие запуска контейнера, которые еще не являются частью самой запущенной программы контейнера
# существуют разлчиные решения в части container runtime:
# - docker
# - lxc
# - runc
# - cri-o
# - rkt
# - containerd
# перечисленные runtimes включены в различные container solutions

# OCI - Open Containers Initiative (https://opencontainers.org)
# OCI стандартизирует использование контйнеров:
# - image-spec определяет как упаковывать контейнер в "filesystem bundle"
# - runtime-spec определяет как запускать эту filesystem в контейнере
# стандартизация OCI обеспечивает совместимость между контейнерами, неважно из какой environment они изначально пришли

# Docker является важной составляющей в контейнерном ландшафте, но Docker не единственный способ для запуска контейнеров
# с момента появления в 2013 году Docker предложил следующее:
# - формает образа контейнера
# - Dockerfile, являющийся методом для создания образов контейнеров
# - способ управления образами контейнеров
# - способ запуска контейнеров
# - способ управления экземплярами контейнеров
# - решение для шаринга образов контейнеров
# т.к. Docker очень распространен, мы будем использовать его для демонстрации контейнеров в этом уроке,
# но Docker не единственный способ для запуска контейнеров!

# с появлением RHEL 8 Red Hat начала предлагать podman в качестве альтернативы Docker
# podman запускает контейнеры без необходимости наличия демона поверх cri-o container runtime
# buildah - связанный серивс использующийся для управления образами контейнеров
# также существуют другие решения для запуска контейнеров:
# LXC - Linux-native container runtime
# systemd-nspawn предлагает контейнеры интегрированные в Systemd
# а также доступны другие решения

# images - read-only environment содержащее среду выполнения, которое включает в себя приложения и все необходимые библиотеки
# registries - используются для хранения образов. Docker Hub является самым распространенным, но private registries также могут созданы
# containers - изолировання среда выполнения, в которой запускается приложение;
# используя namespaces контейнеры могут быть представлены как строго изолированное окружение