# Service - абстракция, которая определяет логический набор pod-ов и политику доступа к ним
# все вместе это упоминается как микросервис
# набор pod-ов, на который нацелен Service часто определяется selector-ом (который есть label)
# контроллер будет непрерывно сканировать pod-ы, которые соответствуют selector-у и включать их в service

# Services существуют независимо от Deployments
# единственное, что они делают - смотрят на Deployment, который имеет определенный набор label, основанный на Selector-е, который указан в service
# это означает, что один Service может обеспечивать доступ к нескольким Deployments, и при этом K8s будет автоматически балансировать нагрузку между этими Deployments

# агент kube-proxy на нодах смотрит в K8s API для обнаружения новых services и endpoints
# после создания он открывает случайные порты и слушает траффик на порт clusterIP и затем перенаправляет траффик к случайно сгенерированным service endpoints

# на физическом уровне балансировку осуществляет агент kube-proxy на нодах
# в etcd хранится объект service, у которого есть свойства name, IP, port, endpoints (ip-адреса pod-ов)
# пользователь обращается к service по имени, ip-адресу и порту, service перенаправляет на LB (kube-proxy), балансировщик устанавливает соединение между пользователем и pod-ом

# согласно требованиям в различных средах, доступны разные типы service:
# - ClusterIP: тип по умолчанию; обеспечивает только internal доступ
# - NodePort: выделяет определенный порт на ноде, который должен быть открыт на firewall
# - LoadBalancer: на текущий момент реализовано только в публичом облаке
# - ExternalName: относительно новый объект, который работает на DNS именах; перенаправление происходит на уровне DNS
# - Service without selector: используйте для прямых соединений, основанных на IP/port, без endpoint. Полезно для соединений с БД или между namespaces