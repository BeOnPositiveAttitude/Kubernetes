---
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: app-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "app.domain.com"

---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: httpbin-vs
  namespace: api
spec:
  hosts:
  - "app.domain.com"
  gateways:
  - istio-system/app-gateway
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: httpbin.api.svc.cluster.local
        port:
          number: 8000

---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: helloworld-vs
  namespace: hello
spec:
  hosts:
  - "app.domain.com"
  gateways:
  - istio-system/app-gateway
  http:
  - match:
    - uri:
        prefix: "/hello"
    route:
    - destination:
        host: helloworld
        port:
          number: 5000

---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: hello-world-dr
  namespace: hello
spec:
  host: helloworld.hello.svc.cluster.local
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN

---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: helloworld-dr
  namespace: welcome
spec:
  host: helloworld
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2

---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: helloworld-vs
  namespace: welcome
spec:
  hosts:
  - helloworld
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: helloworld.welcome.svc.cluster.local
        port:
          number: 5000
        subset: v1
      weight: 70
    - destination:
        host: helloworld.welcome.svc.cluster.local
        port:
          number: 5000
        subset: v2
      weight: 30

---
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: end-user-gateway
  namespace: end-user
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "end-user.domain.com"

---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: helloworld-vs
  namespace: end-user
spec:
  hosts:
  - "end-user.domain.com"
  gateways:
  - end-user-gateway
  http:
  - match:
    - headers:
        end-user:
          exact: kodekloud
    route:
    - destination:
        host: helloworld.end-user.svc.cluster.local
        port:
          number: 5000
        subset: v1
  - route:
    - destination:
        host: helloworld.end-user.svc.cluster.local
        port:
          number: 5000
        subset: v2

---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: helloworld-dr
  namespace: end-user
spec:
  host: helloworld   # именно внутреннее имя, а не внешнее "end-user.domain.com"
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2

---
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: cnn-se
  namespace: cnn
spec:
  hosts:
  - edition.cnn.com
  ports:
  - number: 80
    name: http
    protocol: HTTP
  - number: 443
    name: https
    protocol: HTTPS  
  resolution: DNS

# In the preconfigured cnn namespace, please configure an Istio Egress Gateway, named cnn-istio-egress, to route all outbound HTTP
# and HTTPS traffic to the external domain edition.cnn.com. Please utilize name cnn-istio-egress for your gateway.

# Please confirm that all traffic exits the mesh via the egress gateway, rather than directly from the application pods.

---
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: cnn-istio-egress
  namespace: cnn
spec:
  selector:
    istio: egressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - edition.cnn.com
  - port:
      number: 443
      name: tls
      protocol: TLS
    hosts:
    - edition.cnn.com
    tls:
      mode: PASSTHROUGH

---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: cnn-dr
  namespace: cnn
spec:
  host: istio-egressgateway.istio-system.svc.cluster.local
  subsets:
  - name: cnn

---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: cnn-vs
  namespace: cnn
spec:
  hosts:
  - edition.cnn.com
  gateways:
  - cnn-istio-egress
  - mesh
  http:
  - match:
    - gateways:
      - mesh
      port: 80
    route:
    - destination:
        host: istio-egressgateway.istio-system.svc.cluster.local
        subset: cnn
        port:
          number: 80
      weight: 100
  - match:
    - gateways:
      - cnn-istio-egress
      port: 80
    route:
    - destination:
        host: edition.cnn.com
        port:
          number: 80
      weight: 100

---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: nginx-dr
  namespace: nginx
spec:
  host: nginx
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2

---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: nginx-vs
  namespace: nginx
spec:
  hosts:
  - nginx
  http:
  - route:
    - destination:
        host: nginx.nginx.svc.cluster.local
        port:
          number: 80
        subset: v1
      weight: 100

---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: nginx-dr
  namespace: mirroring
spec:
  host: nginx
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2

---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: nginx-vs
  namespace: mirroring
spec:
  hosts:
  - nginx
  http:
  - route:
    - destination:
        host: nginx.mirroring.svc.cluster.local
        port:
          number: 80
        subset: v1
      weight: 100
    mirror:
      host: nginx.mirroring.svc.cluster.local
      port:
        number: 80
      subset: v2
    mirrorPercentage:
      value: 100

---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: echo-vs
  namespace: echo-limited
spec:
  hosts:
  - echo
  http:
  - route:
    - destination:
        host: echo.echo-limited.svc.cluster.local
        port:
          number: 80

---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: echo-dr
  namespace: echo-limited
spec:
  host: echo
  trafficPolicy:
    connectionPool:
      tcp:
        maxConnections: 1
      http:
        http2MaxRequests: 1
        http1MaxPendingRequests: 1
        maxRequestsPerConnection: 1
    outlierDetection:
      consecutive5xxErrors: 3
      interval: 5s
      baseEjectionTime: 5m

---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: hello-vs
  namespace: hello-delay
spec:
  hosts:
  - helloworld
  http:
  - fault:
      delay:
        percentage:
          value: 100.0
        fixedDelay: 5s
    route:
    - destination:
        host: helloworld.hello-delay.svc.cluster.local
        port:
          number: 5000

---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: hello-vs
  namespace: hello-abort
spec:
  hosts:
  - helloworld
  http:
  - fault:
      abort:
        percentage:
          value: 100.0
        httpStatus: 500
    route:
    - destination:
        host: helloworld.hello-abort.svc.cluster.local
        port:
          number: 5000

---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: httpbin-vs
  namespace: httpbin-timeout
spec:
  hosts:
  - httpbin
  http:
  - timeout: 3s
    route:
    - destination:
        host: httpbin.httpbin-timeout.svc.cluster.local
        port:
          number: 8000

---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: httpbin-vs
  namespace: httpbin-retry
spec:
  hosts:
  - httpbin
  http:
  - route:
    - destination:
        host: httpbin.httpbin-retry.svc.cluster.local
        port:
          number: 8000
    retries:
      attempts: 2
      perTryTimeout: 1s
      retryOn: 5xx

---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: deny-all
  namespace: http-api
spec:
  action: DENY
  rules:
  - {}

---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: allow-httpbin-policy
  namespace: http-api
spec:
  action: ALLOW
  selector:
    matchLabels:
      app: httpbin
  rules:
  - to:
    - operation:
        paths: ["/ip", "/headers"]

---
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: books-mtls
spec:
  mtls:
    mode: STRICT

---
apiVersion: networking.istio.io/v1beta1
kind: WorkloadEntry
metadata:
  name: external-app-we
  namespace: external-nginx
spec:
  address: 10.50.0.2
  labels:
    app: external

---
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: external-app-se
  namespace: external-nginx
spec:
  hosts:
  - nginx.external.com
  ports:
  - number: 80
    name: http
    protocol: HTTP
  resolution: STATIC
  workloadSelector:
    labels:
      app: external

---
# 25

#kubectl -n external-nginx label pod nginx app=external

kubectl label pod nginx -n external-nginx app=nginx

To validate your solution, execute the following steps to differentiate between the internal and external workloads. Start by updating the internal workload's default page with the command:

kubectl exec -n external-nginx -ti nginx -- /bin/bash -c 'cd /usr/share/nginx/html && echo "This is an Nginx Pod" > index.html'

Next, run a pod in the 'welcome' namespace using the command:

kubectl run curl-test --rm -i -t --image=radial/busyboxplus:curl -n welcome

root@controlplane ~ ➜   kubectl run curl-test --rm -i -t --image=radial/busyboxplus:curl -n welcome
If you don't see a command prompt, try pressing enter.
[ root@curl-test:/ ]$ curl http://nginx.external.com
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>

[ root@curl-test:/ ]$ curl http://nginx.external.com
This is an Nginx Pod