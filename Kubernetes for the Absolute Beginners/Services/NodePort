# Services позволяют нам обеспечить взаимодействие между различными компонентами K8s
# Services позволяют нам объединить по сети наши приложения друг с другом и с конечными пользователями
# например Services обеспечивают доступ конечным пользователям к группе frontend pod-ов, взаимодействие между backend и frontend pod-ами, взаимодействие backend pod-ов с внешними источниками данных
# одна из функций Service - слушать порт на ноде кластера и перенаправлять запросы приходящие на этот порт на порт pod-а с нашим приложением (NodePort)
# ClusterIP - в этом случае Service создает Virtual IP внутри кластера для взаимодействия между разными Services (frontend и backend например)
# LoadBalancer - распределяет нагрузку например между веб-серверами в поддерживаемых облачных провайдерах

# NodePort:
# порт 80 нашего pod-а с веб-сервером - это TargetPort, порт на который будет перенаправлен запрос (ip pod-а 10.244.0.2)
# Service можно представить в виде виртуального сервера внутри ноды кластера, у него есть свой ip-адрес 10.106.1.12 (ClusterIP сервиса) и порт (80 в нашем примере)
# и есть порт 30008 на ноде кластера - NodePort, допустимый диапазон портов 30000 - 32767

# механизм балансировки между несколькими pod-ами - random
# в случае нескольких нод кластера, порт 30008 будет открыт на всех нодах и получить доступ к приложению можно обратившись к любой ноде

minikube service myapp-service --url   #смотреть endpoint для доступа к опубликованному service

# вывод команды "kubectl describe service myapp-service" покажет список endpoints - это все pod-ы, которые смог обнаружить Service по заданным labels